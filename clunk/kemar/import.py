#!/usr/bin/env python

import re
import os
import os.path
import struct
from numpy.fft import rfft

file_re = re.compile(r"([LR])(\-?\d+).*e(\d+)a.dat", re.IGNORECASE)

kemar = {}

for dirpath, _dn, files in os.walk("full"):
	for fname in files:
		#print dirpath, fname
		m = file_re.match(fname)
		if not m:
			continue

		fname = os.path.join(dirpath, fname)

		mic = {'L': 0, 'R': 1}[m.group(1).upper()]
		elev = int(m.group(2))
		az = int(m.group(3))

		with open(fname, "rb") as f:
			data = f.read()
		#print "Read %d" %len(data)
		data = struct.unpack(">512h", data)
		sdata = []
		for i in xrange(0, len(data)):
			sdata.append(0)
		for i in xrange(0, len(data)):
			sdata.append(data[i] / 32768.0)
		data = rfft(sdata)
		if elev not in kemar:
			kemar[elev] = {az: {mic: data}}
			continue

		if az not in kemar[elev]:
			kemar[elev][az] = {mic: data}
			continue

		kemar[elev][az][mic] = data

header = """#ifndef CLUNK_KEMAR_H
#define CLUNK_KEMAR_H

/*
This data is Copyright 1994 by the MIT Media Laboratory. 
It is provided free with no restrictions on use, 
provided the authors are cited when the data is used in any research or commercial application.

Bill Gardner billg@media.mit.edu and Keith Martin kdm@media.mit.edu
*/

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* DO NOT EDIT THIS HEADER, IT'S AUTOGENERATED */
"""

print "found %d elevation angles" %len(kemar)
eangles = sorted(kemar.iterkeys())
header += "static const int KemarMinElevation = %d;\n" % min(eangles)
header += "static const int KemarMaxElevation = %d;\n" % max(eangles)
header += "static const int KemarElevationCount = %d;\n" % len(eangles)
header += "static const int KemarElevationStep = %d;\n" % ((max(eangles) - min(eangles)) / (len(eangles) - 1))
header += "static const unsigned KemarPoints = 513;\n"

header += """
struct kemar_elevation_data {
	int elevation;
	unsigned samples;
	const float (*data)[2][513][2];
};

"""
header += "extern struct kemar_elevation_data kemar_data[14];\n"

header += """
#ifdef __cplusplus
}
#endif

#endif
"""

with open("kemar.h", "wb") as f:
	f.write(header)

source = """#include "kemar.h"

"""

epilogue = """
struct kemar_elevation_data kemar_data[%d] =
{
""" %len(eangles)

for elev, az_dict in sorted(kemar.iteritems()):
	print "elevation %d, items: %d" %(elev, len(az_dict))
	array_name = "elev_%s" %(elev if elev >= 0 else ("m%d" % -elev))
	source += """static const float %s[][2][513][2] =
{
""" %array_name

	for az, mic_n_data in sorted(az_dict.iteritems()):
		data0 = ""
		data1 = ""
		for a in mic_n_data[0]:
			data0 += "{%g, %g}, " %(float(a.real), float(a.imag))
		for a in mic_n_data[1]:
			data1 += "{%g, %g}, " %(float(a.real), float(a.imag))
		source += """	/* azimuth = %d */
	{
		{%s},
		{%s}
	},
""" %(az, data0, data1)
	source += "};\n"
	epilogue += "\t{%4d, %4d, %10s },\n" %(elev, len(az_dict), array_name)

epilogue += """};
"""

with open("kemar.c", "wb") as f:
	f.write(source + epilogue)
